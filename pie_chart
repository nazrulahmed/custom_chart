import 'package:charts_flutter/flutter.dart' as charts;
import 'package:flutter/material.dart';

class DonutPieChart extends StatelessWidget {
  final List<charts.Series<LinearSales, String>> seriesList;
  final bool? animate;
  static final colors = [
    charts.Color.fromHex(code: '#48C634'),
    charts.Color.fromHex(code: '#32CD32'),
    charts.Color.fromHex(code: '#008000'),
    charts.Color.fromHex(code: '#F2EC4E'),
    charts.Color.fromHex(code: '#F69144'),
    charts.Color.fromHex(code: '#F72828'),
    charts.Color.fromHex(code: '#900FBF'),
  ];

  DonutPieChart(this.seriesList, {this.animate});

  /// Creates a [PieChart] with sample data and no transition.
  factory DonutPieChart.withSampleData() {
    return DonutPieChart(
      _createSampleData(),
      // Disable animations for image tests.
      animate: false,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
        color: Colors.grey,
        height: 720.0,
        width: 720.0,
        child: Stack(children: <Widget>[
          Center(
            child: Container(
              padding: EdgeInsets.all(32),
              height: 280,
              color: Colors.white,
              child: charts.PieChart<String>(
                seriesList,
                animate: animate,
                defaultRenderer: charts.ArcRendererConfig(
                  arcRendererDecorators: [
                    charts.ArcLabelDecorator(
                      labelPadding: 0,
                      labelPosition: charts.ArcLabelPosition.outside,
                    ),
                  ],
                  strokeWidthPx: 0,
                  arcWidth: 35,
                ),
                layoutConfig: charts.LayoutConfig(
                  leftMarginSpec: charts.MarginSpec.fixedPixel(0),
                  topMarginSpec: charts.MarginSpec.fixedPixel(0),
                  rightMarginSpec: charts.MarginSpec.fixedPixel(0),
                  bottomMarginSpec: charts.MarginSpec.fixedPixel(0),
                ),
              ),
            ),
          ),
          Center(
            child: Container(
              width: 100,
              child: Center(
                  child: Text(
                'Total October Spending',
                textAlign: TextAlign.center,
              )),
            ),
          ),
        ]));
  }

  /// Create one series with sample hard coded data.
  static List<charts.Series<LinearSales, String>> _createSampleData() {
    final data = [
      LinearSales(0, 30, "title 1", "101"),
      LinearSales(1, 10, "title 2", "102"),
      LinearSales(2, 20, "title 3", "103"),
      LinearSales(3, 20, "title 4", "104"),
      LinearSales(4, 15, "title 5", "105"),
      LinearSales(5, 15, "title 6", "106"),
      LinearSales(6, 15, "title 7", "107"),
    ];

    return [
      charts.Series<LinearSales, String>(
        id: 'Sales',
        domainFn: (LinearSales sales, _) => '${sales.title}\n${sales.amount}',
        measureFn: (LinearSales sales, _) => sales.mf,
        colorFn: (LinearSales sales, _) => colors[sales.index],
        data: data,
      )
    ];
  }
}

/// Sample linear data type.
class LinearSales {
  int index;
  int mf;
  final String title;
  final String amount;

  LinearSales(this.index, this.mf, this.title, this.amount);
}
